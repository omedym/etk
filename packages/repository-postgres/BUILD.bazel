load("@aspect_bazel_lib//lib:copy_file.bzl", "copy_file")
load("@aspect_rules_esbuild//esbuild:defs.bzl", "esbuild")
load("@aspect_rules_jest//jest:defs.bzl", "jest_test")
load("@aspect_rules_js//npm:defs.bzl", "npm_package")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config", "ts_project")

package(default_visibility = ["//visibility:public"])

ts_config(
  name = "tsconfig_bazel",
  src = "tsconfig.bazel.json",
  deps = ["//:tsconfig"],
)

_DEPS = [
  "//:node_modules/@nestjs/common",
  "//:node_modules/@nestjs/core",
  "//:node_modules/@paralleldrive/cuid2",
  "//:node_modules/luxon",
  "//:node_modules/reflect-metadata",
  "//:node_modules/neverthrow",

  "//:node_modules/@omedym/nestjs-dmq-repository-postgres-client",

  # Dev Dependencies
  "//:node_modules/@types/luxon",
  "//:node_modules/@types/node",
]

ts_project(
  name = "ts",
  srcs = glob(["src/**/*.ts"], exclude = ["**/*.test.ts", "test/**/*.ts"]),
  composite = True,
  declaration = True,
  incremental = True,
  root_dir = "src",
  resolve_json_module = True,
  tags = ["ts", "module"],
  tsconfig = ":tsconfig_bazel",
  validate = True,
  deps = _DEPS,
  out_dir = "lib",
)

# Generate a package.json at build time to formalize this directory as a valid NPM package
genrule(
  name = "package_json",
  outs = ["package.json"],
  cmd = """
    echo "{
  \\"name\\": \\"@omedym/nestjs-dmq-repository-postgres\\",
  \\"version\\": \\"0.1.1\\",
  \\"author\\": \\"Omedym, LLC\\",
  \\"license\\": \\"MIT\\",
  \\"main\\": \\"lib/index.js\\",
  \\"module\\": \\"dist/index.js\\",
  \\"types\\": \\"lib/index.d.ts\\",
  \\"engines\\": {
    \\"node\\": \\">=18\\"
  },
  \\"repository\\": {
    \\"type\\": \\"git\\",
    \\"url\\": \\"https://github.com/omedym/nestjs-dmq.git\\",
    \\"directory\\": \\"packages/repository-postgres\\"
  },
  \\"dependencies\\": {
    \\"@nestjs/common\\": \\"^10.2.2\\",
    \\"@nestjs/core\\": \\"^10.2.2\\",
    \\"@omedym/nestjs-dmq-repository-postgres-client\\": \\"^0.1.1\\",
    \\"@paralleldrive/cuid2\\": \\"^2.2.2\\",
    \\"luxon\\": \\"^2.5.2\\",
    \\"neverthrow\\": \\"^6.0.0\\",
    \\"reflect-metadata\\": \\"^0.1.13\\"
  }
}" > $@
  """,
)

copy_file(
  name = "license",
  src = "//:npm_license",
  out = "LICENSE"
)

esbuild(
  name = "dist",
  srcs = glob([":ts/dist/**/*"]),
  data = [":package_json"] + [":license"],
  deps = _DEPS,
  entry_point = "lib/index.js",
  external = [
    "@nestjs/common",
    "@nestjs/core",
    "@omedym/nestjs-dmq-repository-postgres-client",
    "@paralleldrive/cuid2"
  ],
  format = "esm",
  output_dir = True,
  platform = "node",
  splitting = True,
  target = "esnext",
)

npm_package(
  name = "npm",
  srcs = [":lib"],
  data = [":package_json"] + [":license"] + _DEPS,
  package = "@omedym/nestjs-dmq-repository-postgres",
)

jest_test(
  name = "test",
  config = "//:jest_config_unit",
  data = _DEPS
    + glob(["src/**/*.ts"], exclude = ["src/**/*.integration.test.ts"])
    + ["//:test_unit_deps", ":tsconfig_bazel"],
  log_level = "warn",
  node_modules = "//:node_modules",
  tags = ["unit"],
  timeout = "short",
)

jest_test(
  name = "integration_test",
  config = "//:jest_config_integration",
  data = _DEPS
    + glob(["src/**/*.ts", "test/**/*.ts"])
    + ["//:test_integration_deps", ":tsconfig_bazel"]
    + [ # Test Dependencies
        "//:node_modules/@nestjs/platform-express",
      ],
  log_level = "info",
  node_modules = "//:node_modules",
  tags = ["integration"],
  timeout = "short",
)
