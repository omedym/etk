generator client {
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  provider = "prisma-client-js"
  output   = "./generated/client"
  previewFeatures = ["multiSchema", "views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
  schemas  = ["dmq"]
}

// TrackedQueue
// ------------

enum JobDataType {
  command
  event
  message
  query
  task
  unknown
  @@schema("dmq")
}

enum JobState {
  active
  added
  completed
  delayed
  failed
  waiting
  waitingChilden
  unknown
  @@schema("dmq")
}

model TrackedQueueJob {
  tenantId                  String              @db.VarChar(64)
  queueGroupId              String?             @db.VarChar(64)
  queueId                   String              @db.VarChar(64)
  jobId                     String              @db.VarChar(64) @default(cuid())

  state                     JobState            @default(unknown)
  dataType                  JobDataType         @default(unknown)

  dataId                    String?             @db.VarChar(64)
  data                      Json?               @db.JsonB
  metadata                  Json?               @db.JsonB
  result                    Json?               @db.JsonB
  log                       String?             @db.Text

  createdAt                 DateTime            @db.Timestamptz(6) @default(now())
  updatedAt                 DateTime            @db.Timestamptz(6) @default(now()) @updatedAt

  events                    TrackedQueueJobEvent[]

  @@id([tenantId, jobId])
  @@index([tenantId, dataId, queueGroupId, queueId, jobId, updatedAt(sort: Desc), state])
  @@index([tenantId, queueGroupId, queueId, jobId, updatedAt(sort: Desc), state])
  @@map("trackedqueue_job")
  @@schema("dmq")
}

model TrackedQueueJobEvent {
  tenantId                  String              @db.VarChar(64)
  jobId                     String              @db.VarChar(64)
  jobEventId                String              @db.VarChar(64) @default(cuid())

  state                     JobState            @default(unknown)
  metadata                  Json?               @db.JsonB

  createdAt                 DateTime            @db.Timestamptz(6) @default(now())

  job                       TrackedQueueJob     @relation(fields: [tenantId, jobId], references: [tenantId, jobId])

  @@id([tenantId, jobId, jobEventId])
  @@index([tenantId, jobId, createdAt(sort: Desc), state])
  @@map("trackedqueue_job_event")
  @@schema("dmq")
}
